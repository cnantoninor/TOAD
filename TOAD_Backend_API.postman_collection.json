{
  "info": {
    "_postman_id": "toad-backend-api-collection",
    "name": "TOAD Backend API",
    "description": "Complete API collection for TOAD (The Open Architecture Designer) backend services. This collection includes all session management, messaging, and health check endpoints.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "toad-backend"
  },
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "health"
          ]
        },
        "description": "Check the health status of the backend server and its dependencies (database, OpenAI API)."
      },
      "response": []
    },
    {
      "name": "API Health Check",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/health",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "health"
          ]
        },
        "description": "Check the health status of the API endpoints and services."
      },
      "response": []
    },
    {
      "name": "Session Management",
      "item": [
        {
          "name": "Create Session",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customInstructions\": \"Create a modern web application with React and Node.js. Focus on scalability and performance.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/sessions",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "sessions"
              ]
            },
            "description": "Create a new conversation session. Optionally provide custom instructions for the AI assistant."
          },
          "response": []
        },
        {
          "name": "Get Session",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/sessions/{{sessionId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "sessions",
                "{{sessionId}}"
              ]
            },
            "description": "Retrieve a specific session by its ID, including all conversation history and metadata."
          },
          "response": []
        },
        {
          "name": "Send Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"I need help designing a microservices architecture for an e-commerce platform.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/sessions/{{sessionId}}/messages",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "sessions",
                "{{sessionId}}",
                "messages"
              ]
            },
            "description": "Send a message to the AI assistant within a specific session. The AI will respond based on the conversation context and custom instructions."
          },
          "response": []
        },
        {
          "name": "Export Session",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/sessions/{{sessionId}}/export",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "sessions",
                "{{sessionId}}",
                "export"
              ]
            },
            "description": "Export a session as a Markdown file containing the complete conversation history, summary, and metadata."
          },
          "response": []
        }
      ],
      "description": "Endpoints for managing conversation sessions with the AI assistant."
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Add correlation ID to all requests for tracking",
          "pm.request.headers.add({",
          "    key: 'x-correlation-id',",
          "    value: pm.variables.replaceIn('{{$guid}}')",
          "});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Common test script for all requests",
          "pm.test('Status code is valid', function () {",
          "    pm.response.to.have.status(200, 201, 404, 500);",
          "});",
          "",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has required headers', function () {",
          "    pm.response.to.have.header('Content-Type');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "sessionId",
      "value": "your-session-id-here",
      "type": "string"
    }
  ]
}